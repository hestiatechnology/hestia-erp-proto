syntax = "proto3";

package hestia.v1.company;
import "google/protobuf/empty.proto";
option go_package = "hestia/api/pb/company";

service CompanyManagement {
    rpc CreateCompany(CreateCompanyRequest) returns (Id);
    rpc GetCompanies(google.protobuf.Empty) returns (ListCompaniesResponse);
    rpc GetCompany(Id) returns (Company);
    rpc UpdateCompany(UpdateCompanyRequest) returns (google.protobuf.Empty);
    //rpc DeleteCompany(DeleteCompanyRequest) returns (DeleteCompanyResponse);
    //rpc ListCompanies(ListCompaniesRequest) returns (ListCompaniesResponse);
    rpc CreateLocation(Location) returns (Id);
    rpc AddUserToCompany (AddUserToCompanyRequest) returns (google.protobuf.Empty);
}

message CreateCompanyRequest {
    string name = 1;
    // Indicates whether the company is a sole trader or not 
    bool isSoleTrader = 2;
    optional string commercialName = 3;
    int32 vatId = 4;
    int32 ssn = 5;
    Location location = 6;
}

message Location {
    string address = 1;
    string locality = 2;
    string postalCode = 3;
    // Must be a Alpha-2 code
    string country = 4;
}

message Id {
    string id = 1;
}

message UpdateCompanyRequest {
    string id = 1;
    string name = 2;
    string description = 3;
}

message UpdateCompanyResponse {
    string id = 1;
}


message ListCompaniesResponse {
    repeated Company companies = 1;
}

message Company {
    string id = 1;
    string name = 2;
    string commercialName = 3;
    string description = 4;
    string logo = 5;
}

message AddUserToCompanyRequest {
    // Email of the user to add to the company
    // If the user does not exist, a temporary account will be created until the user logs in
    string email = 1;
    string companyId = 2;
    optional string employeeId = 3;
}