edition = "2023";

package hestia.company.v1;

import "hestia/common/v1/common.proto";

option go_package = "hestia/api/gen/company;company";

service CompanyManagementService {
  rpc CreateCompany(CreateCompanyRequest) returns (CreateCompanyResponse);
  rpc GetCompanies(GetCompaniesRequest) returns (GetCompaniesResponse);
  rpc GetCompany(GetCompanyRequest) returns (GetCompanyResponse);
  rpc UpdateCompany(UpdateCompanyRequest) returns (UpdateCompanyResponse);
  //rpc DeleteCompany(DeleteCompanyRequest) returns (DeleteCompanyResponse);
  //rpc ListCompanies(ListCompaniesRequest) returns (ListCompaniesResponse);
  rpc CreateLocation(CreateLocationRequest) returns (CreateLocationResponse);
  rpc AddUserToCompany(AddUserToCompanyRequest) returns (AddUserToCompanyResponse);
}

message CreateCompanyRequest {
  string name = 1;
  // Indicates whether the company is a sole trader or not
  bool is_sole_trader = 2;
  string commercial_name = 3 [features.field_presence = EXPLICIT];
  string vat_id = 4;
  uint64 ssn = 5;
  Location location = 6;
}

message CreateCompanyResponse {
  hestia.common.v1.Id id = 1;
}

message Location {
  string address = 1;
  string locality = 2;
  string postal_code = 3;
  // Must be a Alpha-2 code
  string country = 4;
}

message GetCompaniesRequest {
  hestia.common.v1.TimePagination pagination = 1;
}

message GetCompanyRequest {
  oneof company {
    hestia.common.v1.Id id = 1;
    string code = 2;
  }
}

message GetCompanyResponse {
  Company company = 1;
}

message UpdateCompanyRequest {
  string id = 1;
  string name = 2;
  string description = 3;
}

message UpdateCompanyResponse {
  hestia.common.v1.Id id = 1;
}

message GetCompaniesResponse {
  repeated Company companies = 1;
}

message Company {
  hestia.common.v1.Id id = 1;
  string name = 2;
  string commercial_name = 3;
  string description = 4;
  string logo = 5;
}

message CreateLocationRequest {
  Location location = 1;
}

message CreateLocationResponse {
  hestia.common.v1.Id id = 1;
}

message AddUserToCompanyRequest {
  // Email of the user to add to the company
  // If the user does not exist, a temporary account will be created until the user logs in
  string email = 1;
  hestia.common.v1.Id company_id = 2;
  hestia.common.v1.Id employee_id = 3 [features.field_presence = EXPLICIT];
}

message AddUserToCompanyResponse {}
